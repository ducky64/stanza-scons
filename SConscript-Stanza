import shlex, subprocess
from collections import namedtuple

Import('env')

env['STANZAC'] = 'stanza'
if env['PLATFORM'] == 'posix':
  env['STANZA_PLATFORM'] = 'linux'
elif env['PLATFORM'] == 'darwin':
  env['STANZA_PLATFORM'] = 'os-x'
else:
  raise Exception("Unknown platform '%s' in detecting stanza platform" % env['PLATFORM'])
env['STANZA_FLAGS'] = []

##
## Stanza Compiler Builder
##
def stanza_install_cleanup(target, source, env):
  assert len(source) == 1
  assert len(target) == 1
  with open(source[0].abspath, 'r') as input:
    with open(target[0].abspath, 'w') as output:
      for line in input:
        if line.rstrip():
          output.write(line)

env.Append(BUILDERS = {
    # Compiles a Stanza compiler with custom macro syntax
    'StanzaCompilerBuild': Builder(
        action='$STANZAC $STANZA_FLAGS -e $SOURCES -o $TARGET -s ${TARGET}_src.s -flags OPTIMIZE',
        src_suffix='.stanza'),
    # Runs the install script on a Stanza compiler, embedding platform and path information
    'StanzaInstall': Builder(
        action='$SOURCE -platform $STANZA_PLATFORM -path $STANZA_DIR -install $TARGET'),
    'StanzaInstallCleanup': Builder(
        action=[stanza_install_cleanup,
                Chmod('$TARGET', 0755)]
    )
})

"""Builds a Stanza compiler with additional sources for macros.
An intermediate target (the compiler binary) is generated, and the final out
is just that wrapped in a script generated by Stanza's installer.
"""
def StanzaCompiler(env, target, source):
  target = File(target)
  # Get stanzadir for the install script
  command = ['stanza', '-stanzadir']
  stanzadir, _ = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                  universal_newlines=True).communicate()

  env = env.Clone(
    STANZA_DIR=stanzadir
  )
  compiler_exec = env.StanzaCompilerBuild(target.File(target.name + '_exec'), source)
  tmp_script = env.StanzaInstall(target.File(target.name + '_tmp'), compiler_exec)
  return env.StanzaInstallCleanup(target, tmp_script)

env.AddMethod(StanzaCompiler)

##
## Stanza Builder
##

StanzaLibType = namedtuple('StanzaLibType', ['Sources'])

env['STANZA_LIBS'] = []

# A simple wrapper around source files for a static library, since Stanza has
# no concept of a static library currently.
# TODO: replace with Stanza static libraries when ready
def StanzaLib(env, target, source):
  assert isinstance(source, list)
  return StanzaLibType(source)
env.AddMethod(StanzaLib)

# Compiles a Stanza program
_stanza_builder = Builder(
  action='$STANZAC $STANZA_FLAGS -i $SOURCES -o $TARGET -s ${TARGET}_src.s',
  src_suffix='.stanza')

def Stanza(env, target, source, stanzac=None):
  if stanzac is not None:
    env = env.Clone(
      STANZAC=stanzac,
    )
    Depends(target, stanzac)
  if env['STANZA_LIBS']:
    source = sum([lib.Sources for lib in env['STANZA_LIBS']], []) + source
  return _stanza_builder.__call__(env, target, source)

env.AddMethod(Stanza)
