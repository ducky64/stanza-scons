import shlex, subprocess
from collections import namedtuple
import os

Import('env')

AddOption('--stanzac',
          dest='stanzac',
          type='string',
          action='store',
          help='custom stanza executable')

AddOption('--stanzadir',
          dest='stanzadir',
          type='string',
          action='store',
          help='(temporary) path to stanza install, needed for macro compilation')

if GetOption('stanzac'):
  env['STANZAC'] = GetOption('stanzac')
  print("Using specified STANZAC='%s'" % env['STANZAC'])
else:
  env['STANZAC'] = 'stanza'
  print("Using default STANZAC=%s" % env['STANZAC'])

if GetOption('stanzadir'):
  env['STANZADIR'] = GetOption('stanzadir')
  print("Using specified STANZADIR='%s'" % env['STANZADIR'])
else:
  raise Exception("TEMPORARY: must define --stanzadir to location of compiler")

env['STANZA_FLAGS'] = []

##
## Stanza Compiler Builder
##
stanza_compiler_inputs = [
  "core/reader.stanza",
  "core/macro-utils.stanza",
  "compiler/stz-algorithms.stanza",
  "compiler/stz-padder.stanza",
  "compiler/stz-utils.stanza",
  "compiler/stz-parser.stanza",
  "compiler/stz-params.stanza",
  "compiler/stz-core-macros.stanza",
  "compiler/stz-ids.stanza",
  "compiler/lang-read.stanza",
  "compiler/lang-check.stanza",
  "compiler/stz-primitives.stanza",
  "compiler/stz-pkg-ir.stanza",
  "compiler/stz-il-ir.stanza",
  "compiler/stz-tl-ir.stanza",
  "compiler/stz-kl-ir.stanza",
  "compiler/stz-imms.stanza",
  "compiler/stz-tgt-ir.stanza",
  "compiler/stz-bb-ir.stanza",
  "compiler/stz-asm-ir.stanza",
  "compiler/stz-backend.stanza",
  "compiler/stz-input.stanza",
  "compiler/stz-namemap.stanza",
  "compiler/stz-renamer.stanza",
  "compiler/stz-resolver.stanza",
  "compiler/stz-infer.stanza",
  "compiler/stz-type-calculus.stanza",
  "compiler/stz-type.stanza",
  "compiler/stz-kform.stanza",
  "compiler/stz-tgt-writer.stanza",
  "compiler/stz-tgt.stanza",
  "compiler/stz-bb.stanza",
  "compiler/stz-asm-emitter.stanza",
  "compiler/stz-compiler.stanza",
  "compiler/stz-arg-parser.stanza",
  "compiler/stz-langs.stanza",
  "compiler/lang-renamer.stanza",
  "compiler/lang-resolver.stanza",
]
stanza_compiler_main = "compiler/stz-main.stanza"

env['STANZA_COMPILER_SRCS'] = [os.path.join(env['STANZADIR'], src) for src in stanza_compiler_inputs]
env['STANZA_COMPILER_MAIN'] = os.path.join(env['STANZADIR'], stanza_compiler_main)

env.Append(BUILDERS = {
  # Compiles a Stanza compiler with custom macro syntax
  'StanzaCompilerBuild': Builder(
    action='$STANZAC $STANZA_FLAGS $STANZA_COMPILER_SRCS $SOURCES $STANZA_COMPILER_MAIN -o $TARGET -s ${TARGET}_src.s -optimize',
    src_suffix='.stanza',
  )
})

"""Builds a Stanza compiler with additional sources for macros.
An intermediate target (the compiler binary) is generated, and the final out
is just that wrapped in a script generated by Stanza's installer.
"""
def StanzaCompiler(env, target, source):
  return env.StanzaCompilerBuild(File(target), source)

env.AddMethod(StanzaCompiler)

##
## Stanza Builder
##

StanzaLibType = namedtuple('StanzaLibType', ['Sources'])

env['STANZA_LIBS'] = []

# A simple wrapper around source files for a static library, since Stanza has
# no concept of a static library currently.
# TODO: replace with Stanza static libraries when ready
def StanzaLib(env, target, source):
  assert isinstance(source, list)
  return StanzaLibType(source)
env.AddMethod(StanzaLib)

# Compiles a Stanza program
_stanza_builder = Builder(
  action='$STANZAC $STANZA_FLAGS $SOURCES -o $TARGET -s ${TARGET}_src.s',
  src_suffix='.stanza')

def Stanza(env, target, source, stanzac=None):
  if stanzac is not None:
    env = env.Clone(
      STANZAC=stanzac,
    )
    Depends(target, stanzac)
  if env['STANZA_LIBS']:
    source = sum([lib.Sources for lib in env['STANZA_LIBS']], []) + source
  return _stanza_builder.__call__(env, target, source)

env.AddMethod(Stanza)
