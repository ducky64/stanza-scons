import shlex, subprocess
from collections import namedtuple
import os
import warnings

Import('env')

if 'STANZAC' not in env:
  env['STANZAC'] = 'stanza'

if 'STANZA_CONFIG' not in env:
  if 'STANZA_CONFIG' in env['ENV']:
    env['STANZA_CONFIG'] = env['ENV']['STANZA_CONFIG']
  if 'STANZA_CONFIG' in os.environ:
    env['STANZA_CONFIG'] = os.environ['STANZA_CONFIG']
  else:
    warnings.warn("No STANZA_CONFIG detected, falling back to homedir")
    env['STANZA_CONFIG'] = os.path.expanduser('~')
stanza_config_file = open(os.path.join(env['STANZA_CONFIG'], '.stanza'), 'r')

for line in stanza_config_file:
  line_split = line.split('=')
  line_split = [elt.strip() for elt in line_split]
  line_split = [elt.strip('"') for elt in line_split]
  if line_split[0] == 'install-dir':
    assert 'STANZADIR' not in env, "multiple install-dir found in .stanza config"
    env['STANZADIR'] = line_split[1]
assert 'STANZADIR' in env, "no install-dir found in .stanza config"

env['STANZA_FLAGS'] = []

# Propagate some required environment variables from OS
# TODO: do this in a similar way to other SCons tools  
if 'TEMP' not in env['ENV'] and 'TEMP' in os.environ:
  # Required for MinGW builds
  env['ENV']['TEMP'] = os.environ['TEMP']
if 'STANZA_CONFIG' not in env['ENV'] and 'STANZA_CONFIG' in os.environ:
  env['ENV']['STANZA_CONFIG'] = os.environ['STANZA_CONFIG']

##
## Stanza Compiler Builder
##
stanza_compiler_main = "compiler/stz-main.stanza"

env['STANZA_COMPILER_MAIN'] = File(os.path.join(env['STANZADIR'], stanza_compiler_main))

env.Append(BUILDERS = {
  # Compiles a Stanza compiler with custom macro syntax
  'StanzaCompilerBuild': Builder(
    action='$STANZAC $SOURCES $STANZA_COMPILER_MAIN -o $TARGET -s ${TARGET}_src.s $STANZA_FLAGS -optimize',
    src_suffix='.stanza',
  )
})

"""Builds a Stanza compiler with additional sources for macros.
An intermediate target (the compiler binary) is generated, and the final out
is just that wrapped in a script generated by Stanza's installer.
"""
def StanzaCompiler(env, target, source):
  return env.StanzaCompilerBuild(File(target), source)

env.AddMethod(StanzaCompiler)

##
## Stanza Builder
##

StanzaLibType = namedtuple('StanzaLibType', ['Sources'])

env['STANZA_LIBS'] = []

# A simple wrapper around source files for a static library, since Stanza has
# no concept of a static library currently.
# TODO: replace with Stanza static libraries when ready
def StanzaLib(env, target, source):
  assert isinstance(source, list)
  return StanzaLibType(source)
env.AddMethod(StanzaLib)

# Compiles a Stanza program
_stanza_builder = Builder(
  action='$STANZAC $SOURCES -o $TARGET -s ${TARGET}_src.s $STANZA_FLAGS',
  src_suffix='.stanza',
  suffix='$PROGSUFFIX')

def Stanza(env, target, source, stanzac=None):
  if stanzac is not None:
    env = env.Clone(
      STANZAC=stanzac,
    )
    Depends(target, stanzac)
  if env['STANZA_LIBS']:
    source = sum([lib.Sources for lib in env['STANZA_LIBS']], []) + source
  return _stanza_builder.__call__(env, target, source)

env.AddMethod(Stanza)
